{
    "docs": [
        {
            "location": "/", 
            "text": "GPUArrays Documentation\n\n\n#\n\n\nGPUArrays.gpu_call\n \n \nFunction\n.\n\n\nCalls function \nf\n on the GPU. \nA\n must be an GPUArray and will help to dispatch to the correct GPU backend and supplies queues and contexts. Calls kernel with \nkernel(state, args...)\n, where state is dependant on the backend and can be used for e.g getting an index into A with \nlinear_index(state)\n. Optionally, launch configuration can be supplied in the following way:\n\n\n1) A single integer, indicating how many work items (total number of threads) you want to launch.\n    in this case `linear_index(state)` will be a number in the range 1:configuration\n2) Pass a tuple of integer tuples to define blocks and threads per blocks!\n\n\n\n\nsource", 
            "title": "Home"
        }, 
        {
            "location": "/#gpuarrays-documentation", 
            "text": "#  GPUArrays.gpu_call     Function .  Calls function  f  on the GPU.  A  must be an GPUArray and will help to dispatch to the correct GPU backend and supplies queues and contexts. Calls kernel with  kernel(state, args...) , where state is dependant on the backend and can be used for e.g getting an index into A with  linear_index(state) . Optionally, launch configuration can be supplied in the following way:  1) A single integer, indicating how many work items (total number of threads) you want to launch.\n    in this case `linear_index(state)` will be a number in the range 1:configuration\n2) Pass a tuple of integer tuples to define blocks and threads per blocks!  source", 
            "title": "GPUArrays Documentation"
        }
    ]
}