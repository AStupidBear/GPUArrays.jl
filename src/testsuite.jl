# Abstract test suite that can be used for all packages inheriting from GPUArray

module TestSuite

using GPUArrays
using GPUArrays: mapidx, gpu_sub2ind

using LinearAlgebra
using Random
using Test

using FFTW
using FillArrays
using StaticArrays

toarray(T, x::Tuple{X, Vararg{Int}}) where X = fill(first(x), Base.tail(x))
toarray(::Type{T}, x::NTuple{N, Int}) where {T <: Bool, N} = rand(T, x)
toarray(::Type{T}, x::NTuple{N, Int}) where {T <: Integer, N} = rand(T(1):T(10), x)
toarray(T, x::NTuple{N, Int}) where N = rand(T, x)
toarray(T, x) = x
togpu(T, x::AbstractArray) = T(x)
togpu(T, x) = x

"""
Calls function `f` on input arrays generated by `sizes` as Base.Array and converted to
`Typ`. Compares the result of `f` and tests if they agree. `sizes` can be the shape of the
array, a value or a tuple `(val, shape...)` which will create a `fill(val, shape...)`.
"""
function against_base(f, Typ, sizes...)
    jl_arrays = toarray.(eltype(Typ), sizes)
    gpu_arrays = togpu.(Typ, jl_arrays)
    res_jl = f(jl_arrays...)
    res_gpu = f(gpu_arrays...)
    @test res_jl â‰ˆ Array(res_gpu)
end


include("testsuite/blas.jl")
include("testsuite/broadcasting.jl")
include("testsuite/construction.jl")
include("testsuite/fft.jl")
include("testsuite/gpuinterface.jl")
include("testsuite/linalg.jl")
include("testsuite/mapreduce.jl")
include("testsuite/base.jl")
include("testsuite/indexing.jl")
# include("testsuite/vector.jl")
include("testsuite/random.jl")

function supported_eltypes()
    (Float32, Float64, Int32, Int64, ComplexF32, ComplexF64)
end

export against_base, run_tests, supported_eltypes

end


"""
Runs the GPUArrays test suite on array type `Typ`
"""
function test(Typ)
    GPUArrays.allowslow(false)
    TestSuite.test_gpuinterface(Typ)
    TestSuite.test_base(Typ)
    TestSuite.test_blas(Typ)
    TestSuite.test_broadcasting(Typ)
    TestSuite.test_construction(Typ)
    TestSuite.test_fft(Typ)
    TestSuite.test_linalg(Typ)
    TestSuite.test_mapreduce(Typ)
    TestSuite.test_indexing(Typ)
    TestSuite.test_random(Typ)
end
